n <-10^4 # tamaño de la muestra
U <-runif(n) # genera un vector con distribución uniforme
g <-Vectorize(function(x) (log(x + 1)/2) + (1/2) ) # construimos función g
curve(g,0,1,col="blue",lwd=1,main="Grafico de g(X)")
grid()
Y <- g(U) #genera el vector para cada observación
acumulado<-cumsum(Y)/(1:n)
plot(1:n,acumulado,col="blue",type="l",ylab="Aproximacion",xlab="Iteraciones")
P_est1=mean(Y)
e1<-(abs(P_est1-log(2)))
e1
set.seed(100) # establecemos una semilla
n <-10^4 # Tamaño de la muestra
X <- rnorm(n, mean = 5, sd = 25)
acumulado<-cumsum(Y)/(1:n)
plot(1:n,acumulado,col="blue",type="l",ylab="Aproximacion",xlab="Iteraciones")
abline(h=integrate(g,0,1)$value,col="red",lwd=1)
curve(rnorm(n,mean = 5, sd = 25),-0.1,1.1,lwd=1, ylim=c(-1,2))
curve(rnorm(x,mean = 5, sd = 25),-0.1,1.1,lwd=1, ylim=c(-1,2))
x <- rnorm(n, mean = 5, sd = 25)
curve(rnorm(x,mean = 5, sd = 25),-0.1,1.1,lwd=1, ylim=c(-1,2))
x <- rnorm(n, mean = 5, sd = 25)
curve(dnorm(x, mean = 5, sd = 25), -0.1, 1.1, lwd = 1, ylim = c(-1, 2))
x <- rnorm(n, mean = 5, sd = 25)
hist(x, xlim = c(-0.1, 1.1), col = "lightblue", border = "black")
curve(rnorm(x,mean = 5, sd = 25),-0.1,1.1,lwd=1, ylim=c(-1,2))
curve(rnorm(x,mean = 5, sd = 25),-0.1,1.1,lwd=1, ylim=c(-5,5))
curve(rnorm(x,mean = 5, sd = 25),-0.5,1.1,lwd=1, ylim=c(-5,5))
curve(rnorm(x,mean = 5, sd = 25),-0.5,1.1,lwd=1, ylim=c(-25,25))
pi
set.seed(452)
n <-10^4 # Tamaño de la muestra
U <- runif(n,0,2/11)
g <- Vectorize(function(x) ((1/pi) * exp(-((2-x)/2x)-0.5)^2))
g <- Vectorize(function(x) ((1/pi) * exp(-((2-x)/2x))-0.5)^2)))
# Paquetes ----------------------------------------------------------------
library(numDeriv)
library(readxl)
# CSV y formatos --------------------------------------------------------
# Abrir y dar formato a la base de datos
muestra_Gammma <- read.csv("muestraGamma.csv",  sep = ",")
tablaDeVida <- read_excel("tabla.xls")
# Inciso 1 ---------------------------------------------------------------
set.seed(147) # definimos una semilla
n <-10^4 # tamaño de la muestra
U <-runif(n) # genera un vector con distribución uniforme
g <-Vectorize(function(x) (log(x + 1)/2) + (1/2) ) # construimos función g
curve(g,0,1,col="lightblue3",lwd=1,main="Grafico de g(X)")
grid()
Y <- g(U) #genera el vector para cada observación
acumulado<-cumsum(Y)/(1:n)
plot(1:n,acumulado,col="lightblue3",type="l",ylab="Aproximacion",xlab="Iteraciones")
abline(h=integrate(g,0,1)$value,col="coral2",lwd=1)
P_est1=mean(Y)
e1 <-(abs(P_est1-log(2)))
# Inciso 2 ---------------------------------------------------------------------
# Queremos hallar la P(X < -5)
set.seed(4524)
n <-10^4 # Tamaño de la muestra
U <- runif(n,0,2/11)
g <- Vectorize(function(x) ((1/pi) * exp(-((2-x)/2*x)-0.5)^2))
Y <- g(U)
error_absoluto <- abs(mean(Y)-  pnorm(6,mean = 0.5,sd = (0.5^(1/2))))
# por integración por importancia
set.seed(204)
n <-10^4 # Tamaño de la muestra
A <-rexp(n) + 6
g <-Vectorize(function(x) ((1/pi) * exp(-(x-0.5)^2)/(exp(-x+5))))
Y2<-g(A)
M<-matrix(c(mean(Y2),pnorm(6,mean = 0.5,sd = (0.5^(1/2)), lower.tail = F),abs(mean(Y2)-pnorm(6,mean = 0.5,sd = (0.5^(1/2)), lower.tail = F)),sqrt(var(Y2)/sqrt(10^4))),ncol=4, byrow=TRUE)
colnames(M) <- c("Estimacion", "Valor Real","Error Absoluto","Error Estandar")
M
# Inciso 3 ---------------------------------------------------------------------
# densidad objetivo: dgamma
# densidad auxiliar: dexp
nsim <- 10^4
set.seed(445)
mx <- muestra_Gammma$x
lik <- Vectorize(function(alpha) prod(dgamma(mx, shape = alpha, rate = 1 )))
emv <- optimize(f = lik, int = range(mx), maximum = TRUE)
# valor de alpha: 2.987
c <-emv$objective
U <-runif(nsim)
rc <-rexp(nsim,0.2)
ngen=length(rc)
Ver<-lik(rc)
f.cuasi <- function(alpha) lik(alpha)*dexp(alpha)
curve(c * dexp(x), xlim = c(-4, 4), ylim = c(0, c/pi), lty = 2,
xlab = "mu", ylab = "cuasi-densidad")
curve(f.cuasi, add = TRUE)
for(i in 1:nsim){
while((U[i]*c) > (Ver[i])){
U[i]=runif(1)
rc[i]=rexp(1,0.2)
Ver[i]<-lik(rc[i])
ngen=ngen+1}
}
Valorres=lik(rc)
{cat("Número de generaciones = ", ngen)
cat("\nNúmero medio de generaciones = ", ngen/nsim)
cat("\nProporción de rechazos = ", 1-nsim/ngen, "\n")}
cte <- c*nsim/ngen
q <- quantile(rc, c(0.005, 0.995))
q
# si
# Inciso 4 ---------------------------------------------------------------------
# considere f:
set.seed(4524)
f <-function(x){sin(x + (cos(10*x))/3)}
curve(f,col="lightblue2",lwd=2, from= -2, to = 2, n=1000, ylab="f(x)")
resim <- function(f, alpha=0.5, s0=1.5, niter,mini=-Inf,maxi=Inf){
s_n <- s0
estados<-rep(0,niter)
iter_count <- 0
for (k in 1:niter) {
estados[k]<-s_n
T <- (1 - alpha)^k #Se reduce el T según el número de iteraciones
s_new <- rnorm(1, s_n, 1)
if(s_new<mini){s_new=mini}
if(s_new>maxi){s_new=maxi}
dif <- f(s_new) - f(s_n)
if (dif < 0) {
s_n = s_new
} else {
random <- runif(1,0,1)
if (random < exp(-dif/T)) {
s_n <- s_new
}
}
iter_count <- iter_count + 1}
return(list(r=s_n,e=estados))
}
Resultado <-resim(f,0.1,1.5,10000,-2,2)
Resultado$r
plot(Resultado$e)
SA <- 1000000
tablaDeVida <- subset(tablaDeVida, sex == 1)
tablaDeVida <- subset(tablaDeVida, ynac == 1993)
View(tablaDeVida)
tablaDeVida <- subset(tablaDeVida,  edad >= 30 & edad <= 115)
iteraciones=10^4
n=length(tablaDeVida$qx)
resul<-rep(0,iteraciones)
fnormal = function(x,mu1,mu2,sigma1,sigma2)
{
fx = exp( -((x - mu1)^2/(2*(sigma1)))) -
exp( - ((x - mu2)^2/(2*(sigma2))))
return(fx)
}
mu1 = 4
mu2 = 2
sigma1 = 4
sigma2 = 1
# núcleo de la distribución
fPI = function(x){return(fnormal(x,mu1,mu2,sigma1,sigma2))}
curve(fPI(x), from=0,to=16, type="l",main="Distribución(x) aprox N(4,4) - N(2,1)",xlab="x",ylab="f(x)")
abline(v = 4, col = "lightblue3", lty = 2, lwd = 2)
abline(v = 2, col = "coral2", lty = 2, lwd = 2)
legend("topright", legend = c("Media 1", "Media 2"), col = c("lightblue3", "coral2"), lty = 2, lwd = 2)
# función q(·|Y ): función de distribución de Cauchy
fpK = function(x,y){
pK = dcauchy(y,location = x) # x es el centro del pico de la distribución.
return(pK)
}
par(mfrow=c(1,1))
# Algoritmo
N = 10^5 # Número de Iteraciones
L = 1000 # periodo quemado (burn in)
MCMC = matrix(data = 0, nrow = N, ncol = 12)
colnames(MCMC) =
c("x","y","PIx","PIy","Kxy","Kyx","Rxy","Ryx","Mxy","Myx","Fxy","Salto")
## 1. Inicial con un valor arbitrario de x del dominio de distribución
x = runif(1,-50,50)
for (i in 1:N){
## 2. Generamos la propuesta con una distribucion arbitraria
y = rcauchy(1,location = x) #Valor aleatorio según X
#3. Tasa de Aceptación
PIx = fPI(x)
PIy = fPI(y)
Kxy = fpK(x,y)
Kyx = fpK(y,x)
Rxy = (PIy*Kyx) / (PIx*Kxy)
Ryx = (PIx*Kxy) / (PIy*Kyx)
# Matriz estocástica de los estados de la distribución estacionaria
if (x!=y){
Mxy = Kxy*min(1,Rxy)
Myx = Kyx*min(1,Ryx)
}
else
{ Mxy = -1
Myx = -1
}
#4. Criterio de Aceptacion o Rechazo
#Probabilidad de aceptación,runif(1)
Fxy = runif(1)
MCMC[i,] = c(x,y,PIx,PIy,Kxy,Kyx,Rxy,Ryx,Mxy,Myx,Fxy,0)
if (Fxy < Rxy)
{
x = y
lsalto = 1
}
else
{ lsalto = 0
}
MCMC[i,12] = lsalto
}
mcmc = MCMC[(L+1):N,"x"]
head(mcmc,50)
par(mfrow=c(2,2))
media=mean(mcmc)
curve(fPI(x), from=0,to=16, type="l",main="Distribución(x) aprox N(4,4) - N(2,1)",xlab="x",ylab="f(x)", ylim = c(-0.4, 1),cex.axis = 0.8)
abline(v = mu1, col = "lightblue3", lty = 2, lwd = 2)
abline(v = mu2, col = "coral2", lty = 2, lwd = 2)
abline(v=media, col='seagreen', lwd=2)
hist(mcmc,
freq = FALSE,
main = "Distribucion de muestra MCMC",
xlab = "x",
ylab = "distribucion(x)",
breaks = 200,
xlim = c(0, 15),
cex.axis = 0.8)
abline(v=mu1, col='lightblue3', lwd=3)
abline(v=mu2, col='coral2', lwd=3)
abline(v=media, col='seagreen', lwd=3)
par(mfrow=c(1,1))
#Grafico convergencia de la media
m=N-L
acumulado<-cumsum(mcmc)/(1:m)
plot(1:m,acumulado,col="coral2",type="l",ylab="promedio",xlab="Iteraciones")
mean(mcmc)
#Traceplot
plot(mcmc,type="l",xlab = "x", ylab = "y", main = "Traceplot de muestra MCMC")
abline(h=mu1, col='lightblue3', lwd=3)
abline(h=mu2, col='coral2', lwd=3)
abline(h=media, col='seagreen', lwd=3)
#Grafico de Autocorrelación
acf(mcmc,main = "Autocorrelacion de muestra MCMC")
cat("Tasa de aceptación \n",
"NumeroSaltos/TotalIteraciones :" , mean(MCMC[,"Salto"]) ,"\n")
mean(mcmc)
c
emv
q
Resultado$r
nsim <- 10^4
set.seed(445)
mx <- muestra_Gammma$x
lik <- Vectorize(function(alpha) prod(dgamma(mx, shape = alpha, rate = 1 )))
emv <- optimize(f = lik, int = range(mx), maximum = TRUE)
c <-emv$objective
U <-runif(nsim)
rc <-rexp(nsim,0.2)
ngen=length(rc)
Ver<-lik(rc)
f.cuasi <- function(alpha) lik(alpha)*dexp(alpha)
curve(c * dexp(x), xlim = c(-4, 4), ylim = c(0, c/pi), lty = 2,
xlab = "mu", ylab = "cuasi-densidad")
curve(f.cuasi, add = TRUE)
for(i in 1:nsim){
while((U[i]*c) > (Ver[i])){
U[i]=runif(1)
rc[i]=rexp(1,0.2)
Ver[i]<-lik(rc[i])
ngen=ngen+1}
}
Valorres=lik(rc)
{cat("Número de generaciones = ", ngen)
cat("\nNúmero medio de generaciones = ", ngen/nsim)
cat("\nProporción de rechazos = ", 1-nsim/ngen, "\n")}
cte <- c*nsim/ngen
q <- quantile(rc, c(0.005, 0.995))
q
c
{cat("Número de generaciones = ", ngen)
cat("\nNúmero medio de generaciones = ", ngen/nsim)
cat("\nProporción de rechazos = ", 1-nsim/ngen, "\n")}
cte
q
q
c
q
nsim <- 10^4
set.seed(445)
mx <- muestra_Gammma$x
lik <- Vectorize(function(alpha) prod(dgamma(mx, shape = alpha, rate = 1 )))
emv <- optimize(f = lik, int = range(mx), maximum = TRUE)
emv
Valorres=lik(rc)
Ver[i]<-lik(rc[i])
ngen=ngen+1}
for(i in 1:nsim){
while((U[i]*c) > (Ver[i])){
U[i]=runif(1)
rc[i]=rexp(1,0.2)
Ver[i]<-lik(rc[i])
ngen=ngen+1}
}
cte <- c*nsim/ngen
cte
nsim <- 10^4
set.seed(445)
mx <- muestra_Gammma$x
lik <- Vectorize(function(alpha) prod(dgamma(mx, shape = alpha, rate = 1 )))
emv <- optimize(f = lik, int = range(mx), maximum = TRUE)
tabla_vida_original <- read_excel("tabla.xls")
#filtrando por año de nacimiento y edad
tabla_vida <- tabla_vida_original[(tabla_vida_original$ynac == 1994) &
(tabla_vida_original$sex == 1),]
set.seed(2024)
iteraciones <- 10^4
vec_qx <- tabla_vida$qx[25:length(tabla_vida$qx)]
n <- length(vec_qx)
vec_resultados<-rep(0,iteraciones)
for(i in c(1:iteraciones)){
U<-runif(n)
t <- 1
cont <- 1
while(t == 1){
if(U[cont]>vec_qx[cont]) #Aqui se decide si la persona sobrevive o muere
{cont<-cont+1
}else{
t<-0
}
}
vec_resultados[i]<-cont-1
}
for (i in 1:length(vec_resultados)){
if(vec_resultados[i] < (60-30)){
vec_resultados <- c(vec_resultados, vec_resultados[i])
}
if(vec_resultados[i] >= 30){
vec_resultados <- c(vec_resultados, 60)
}
}
plot(density(vec_resultados))
{cont<-cont+1
}else{
while(t == 1){
if(U[cont]>vec_qx[cont]) #Aqui se decide si la persona sobrevive o muere
{cont<-cont+1
}else{
t<-0
}
}
vec_resultados[i]<-cont-1
for(i in c(1:iteraciones)){
U<-runif(n)
t <- 1
cont <- 1
while(t == 1){
if(U[cont]>vec_qx[cont]) #Aqui se decide si la persona sobrevive o muere
{cont<-cont+1
}else{
t<-0
}
}
vec_resultados[i]<-cont-1
}
for (i in 1:length(vec_resultados)){
if(vec_resultados[i] < (60-30)){
vec_resultados <- c(vec_resultados, vec_resultados[i])
}
if(vec_resultados[i] >= 30){
vec_resultados <- c(vec_resultados, 30)
}
}
plot(density(vec_resultados))
tabla_vida_original <- read_excel("tabla.xls")
#filtrando por año de nacimiento y edad
tabla_vida <- tabla_vida_original[(tabla_vida_original$ynac == 1994) &
(tabla_vida_original$sex == 1),]
set.seed(2024)
iteraciones <- 10^4
vec_qx <- tabla_vida$qx[25:length(tabla_vida$qx)]
n <- length(vec_qx)
vec_resultados<-rep(0,iteraciones)
for(i in c(1:iteraciones)){
U<-runif(n)
t <- 1
cont <- 1
while(t == 1){
if(U[cont]>vec_qx[cont]) #Aqui se decide si la persona sobrevive o muere
{cont<-cont+1
}else{
t<-0
}
}
vec_resultados[i]<-cont-1
}
for (i in 1:length(vec_resultados)){
if(vec_resultados[i] < (60-30)){
vec_resultados <- c(vec_resultados, vec_resultados[i])
}
if(vec_resultados[i] >= 30){
vec_resultados <- c(vec_resultados, 30)
}
}
plot(density(vec_resultados))
fnormal = function(x,mu1,mu2,sigma1,sigma2)
{
fx = exp( -((x - mu1)^2/(2*(sigma1)))) -
exp( - ((x - mu2)^2/(2*(sigma2))))
return(fx)
}
mu1 = 4
mu2 = 2
barplot(vec_resultados, main = "Gráfico de barras de la cantidad", xlab = "Valores", ylab = "Cantidad", col = "skyblue")
vec_resultados
hist(vec_resultados, main="Histograma de vec_resultados", xlab="Valores", ylab="Frecuencia", col="lightblue", border="black")
hist(vec_resultados, main="Histograma de vec_resultados", xlab="Edad residual", ylab="Frecuencia", col="lightblue", border="black")
for (i in 1:length(vec_resultados)){
if(vec_resultados[i] < (60-30)){
vec_resultados <- c(vec_resultados, 2*vec_resultados[i])
}
if(vec_resultados[i] >= 30){
vec_resultados <- c(vec_resultados, 30)
}
}
hist(vec_resultados, main="Histograma de vec_resultados", xlab="Edad residual", ylab="Frecuencia", col="lightblue", border="black")
vec_resultados <- vec_resultados*10000000
hist(vec_resultados, main="Histograma de vec_resultados", xlab="Edad residual", ylab="Frecuencia", col="lightblue", border="black")
for (i in 1:length(vec_resultados)){
if(vec_resultados[i] < (60-30)){
vec_resultados <- c(vec_resultados*1000000, vec_resultados[i])
}
if(vec_resultados[i] >= 30){
vec_resultados <- c(vec_resultados, 30)
}
}
hist(vec_resultados, main="Histograma de vec_resultados", xlab="Edad residual", ylab="Frecuencia", col="lightblue", border="black")
vec_resultados[i]<-cont-1
for(i in c(1:iteraciones)){
U<-runif(n)
t <- 1
cont <- 1
while(t == 1){
if(U[cont]>vec_qx[cont]) #Aqui se decide si la persona sobrevive o muere
{cont<-cont+1
}else{
t<-0
}
}
vec_resultados[i]<-cont-1
}
for (i in 1:length(vec_resultados)){
if(vec_resultados[i] < (60-30)){
vec_resultados <- c(vec_resultados, vec_resultados[i])
}
if(vec_resultados[i] >= 30){
vec_resultados <- c(vec_resultados*10000000, 30)
}
}
for (i in 1:length(vec_resultados)){
if(vec_resultados[i] < (60-30)){
vec_resultados <- c(vec_resultados, vec_resultados[i])
}
if(vec_resultados[i] >= 30){
vec_resultados <- c(vec_resultados*2, 30)
}
}
for (i in 1:length(vec_resultados)){
if(vec_resultados[i] < (60-30)){
vec_resultados <- c(vec_resultados, vec_resultados[i])
}
if(vec_resultados[i] >= 30){
vec_resultados <- c(vec_resultados, 30)
}
}
tabla_vida_original <- read_excel("tabla.xls")
#filtrando por año de nacimiento y edad
tabla_vida <- tabla_vida_original[(tabla_vida_original$ynac == 1994) &
(tabla_vida_original$sex == 1),]
set.seed(2024)
iteraciones <- 10^4
vec_qx <- tabla_vida$qx[25:length(tabla_vida$qx)]
n <- length(vec_qx)
vec_resultados<-rep(0,iteraciones)
for(i in c(1:iteraciones)){
U<-runif(n)
t <- 1
cont <- 1
while(t == 1){
if(U[cont]>vec_qx[cont]) #Aqui se decide si la persona sobrevive o muere
{cont<-cont+1
}else{
t<-0
}
}
vec_resultados[i]<-cont-1
}
for (i in 1:length(vec_resultados)){
if(vec_resultados[i] < (60-30)){
vec_resultados <- c(vec_resultados, vec_resultados[i])
}
if(vec_resultados[i] >= 30){
vec_resultados <- c(vec_resultados, 30)
}
}
conteos <- as.vector(table(vec_resultados))
conteos <- conteos * 1000000
conteos[31] <- conteos[31]*2
barplot(conteos, names.arg = seq_along(conteos), main = "Histograma de conteos", xlab = "Índice", ylab = "Valor")
conteos <- as.vector(table(vec_resultados))
conteos <- conteos * 1000000
conteos[31] <- conteos[31]*2
barplot(conteos, names.arg = seq_along(conteos), main = "Histograma de conteos", xlab = "Índice", ylab = "Valor")
options(scipen = 999)
conteos <- as.vector(table(vec_resultados))
conteos <- conteos * 1000000
conteos[31] <- conteos[31]*2
axis(side = 2, at = seq(0, 7.5e+09, by = 5))
